#!/usr/bin/python
import sys,os, argparse, imp
from os import path
from string import Template
from pypt import task,_print_tasks,_run_by_task_name

_dir_list = ["data","code","tables","results","figures"]
_readme_template = "${pname}\n===\n"

@task()
def generate(project_name,dir_list=_dir_list):
	"""Generate the project stucture"""
	print("Creating dir: %s"%project_name)
	os.mkdir(project_name)
	os.chdir(project_name)
	for d in dir_list:
		print("Creating dir: %s"%d)
		os.mkdir(d)
	with open("README.md","w") as readme:
		print("Populating README")
		t = Template(_readme_template)
		readme.write(t.substitute(pname=project_name))

@task()
def remove(project_name):
	"""Remove the project structure"""
	for root, dirs, files in os.walk(project_name, topdown=False):
		for name in files:
			f = os.path.join(root,name)
			print("Removing file: %s"%f)
			os.remove(f)
		for name in dirs:
			d = os.path.join(root,name)
			print("Removing dir: %s"%d)
			os.rmdir(d)
	print("Removing dir: %s"%project_name)
	os.rmdir(project_name)

def _create_parser():
	"""
	@rtype: argparse.ArgumentParser
	"""
	parser = argparse.ArgumentParser()
	parser.add_argument("tasks", help="perform specified task and all it's dependancies",
						metavar="task", nargs = '*')
	parser.add_argument('-l', '--list-tasks', help = "List the tasks",
						action =  'store_true')
	parser.add_argument('-f', '--file',
						help = "Build file to read the tasks from. 'makefile.py' is default value assumed if this argument is unspecified",
						metavar = "file", default =  "makefile.py")
	
	return parser

if __name__=="__main__":
	"""
	Build the specified module with specified arguments.
	"""
	args = sys.argv[1:]

	# Build the command line.
	parser = _create_parser()
	this_module = sys.modules["__main__"]

	#No args passed. 
	if not args:
		parser.print_help()
		print("\nDefault tasks:")
		_print_tasks(this_module)
		sys.exit()

	# Parse arguments.
	args = parser.parse_args(args)

	#load build file as a module
	if ("generate" in args.tasks or "remove" in args.tasks):
		module = this_module
	else:
		if not path.isfile(args.file):
			raise Exception("Build file '%s' does not exist" % args.file) 
		else:
			module = imp.load_source(
					path.splitext(
						path.basename(args.file))[0],args.file)
	
	
	# Run task and all it's dependencies.
	if args.list_tasks:
		print("Available tasks:")
		_print_tasks(module)
		#TODO: rename all calls to singular
	elif not args.tasks:
		parser.print_help()
		print("\n")
		_print_tasks(module)
	else:
		_run_by_task_name(module,args.tasks)


